[의존성 주입(DI)를 통한 객체 간의 관계 구성]

** 의존
ⓐ→→→→→→→→ⓑ
a에서 b객체를 직접 생성
(a는 b에 대해 의존하고 있음)
>> 직접 생성 : 결합성이 너무 높음

*** 의존성 주입
ⓐ→→→????↔↔↔ⓑ
a가 ?에게 요청 ('나 b 객체 필요해!') >> a는 b가 필요하다는 신호만 보냄
?가 알아서 b를 찾아온 후 b객체 주입 (외부에서 이루어짐)

: 의존성 주입방식을 사용하기 위해서는 ??? 라는 존재가 필요하게 됨
스프링프레임워크에서는 ApplicationContext가 ??? 라는 존재이며,
필요한 객체들을 생성하고, 필요한 객체들을 주입해주는 역할을 함

따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고,
이러한 객체들을 엮는(wiring)작업의 형태로 개발을 하게 됨

AppriocationContext가 관리하는 객체들을 '빈(Bean)'이라고 부르고,
(스프링이 관리하는 객체 > 빈)
빈과 빈 사이의 의존관계를 처리하는 방식으로
xml방식, 어노테이션 설정, java설정방식을 이용한다.
(거의 xml, 어노테이션 설정을 사용)


[AOP의 지원]
	관점 지향 프로그래밍.

ex) 결제 메서드를 만든다고 할 때,
결제하는 코드만 만들고 싶은데
트랜젝션(디비)처리, 로그출력(오류확인), exception처리(예외) ... >> 없어서는 안되는 처리들도 같이 구성을 해야 함
개발자들이 결제하는 로직만 개발하는 것이 훨씬 작업환경이 좋음 (메인 로직:결제)
관점지향프로그래밍은 개발자가 메인로직에만 집중할 수 있게 해줌

		결제	마이	포인트 >> 개발자 개발 구간 (메인로직, 종단관심사
로그ㅡ ㅡ ㅡ ㅡ ㅡ ㅁ ㅡ ㅡ ㅡ ㅁㅡ ㅡ ㅡㅁ ㅡㅡ ㅡ 
트랜젝션ㅡ ㅡ ㅡ ㅡㅁ  ㅡ ㅡ ㅡㅁ ㅡ ㅡ ㅡㅁ ㅡ ㅡ
예외처리 ㅡ ㅡ ㅡ ㅡㅁ ㅡ ㅡ ㅡㅁ ㅡ ㅡ ㅡ ㅁㅡ ㅡㅡ
>>AOP가 처리 (횡단 관심사)

	좋은 개발환경에서는 개발자가 비지니스 로직에만 집중할 수 있게 함
	스프링 프레임워크는 반복적인 코드를 제거해줌으로써
	핵심 비지니스 로직에만 집중할 수 있는 방법을 제공!
	
	보안이나 로그, 트랜젝션, 예외처리와 같이 비지니스 로직은 아니지만
	반드시 처리가 필요한 부분을 횡단 관심사(cross-concern)이라고 한다
	스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고
	횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.

	이를 통해서 생기는 3가지 이점
	1) 핵심 비지니스 로직에만 집중하여 코드 개발
	2) 각 프로젝트마다 다른 관심사 적용 시 코드 수정 최소화
	3) 원하는 관심사의 유지보수가 수월한 코드 구성 가능

[트랜잭션의 지원]
포인트 적립 서비스 : 최소 db접근 2번
( insert > update)
이러한 과정에서 에러가 생김 >> 알아서 rollback 해줌
	DB작업시 트랜젝션 관리를 매번 상황에 맞게 코드로 작성하지 않고,
	어노테이션이나 xml로 트랜잭션 관리를 설정할 수 있음

[단위 테스트]
	전체 Application을 실행하지 않아도 기능별 단위테스트가 용이하기 때문에
	버그를 줄이고 개발시간을 단축할 수 있음
	(WAS가 없어도-서버가 없어도 테스트 가능)

	




