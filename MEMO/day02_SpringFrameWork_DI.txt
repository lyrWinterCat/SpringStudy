스프링 프레임워크의 장점
	- 복잡함에 반기를 들어서 만들어진 프레임워크
	- 프로젝트 전체 구조를 설계할 때 유용한 프레임워크
	- 다른 프레임워크들의 포용 (여러 프레임워크를 혼용해서 사용 가능)
	>> 호환 가능 (프론트엔드-랜더링 서버도 연동 가능)
	- 개발 생산성과 개발도구의 지원

스프링 프레임워크의 특징
	- POJO 기반의 구성
	- 의존성 주입(DI)을 통한 객체 간의 관계 구성
	- AOP(Aspect-Oriented-Programming)지원 : 관점 지향 프로그래밍
	- 편리한 MVC 구조
	- WAS의 종속적이지 않은 개발 환경

* POJO (Plain Old Java Object) 기반의 구성 
	오래된 방식의 간단한 자바 객체라는 의미,
	JAVA 코드에서 일반적으로 객체를 구성하는 방식을
	스프링 프레임워크에서 그대로 사용할 수 있다는 말 !
 >> 자바를 쓸 수 있음 :) 

**  의존성 주입(DI)를 통한 객체간의 관계 구성
	의존성(Dependency)이란
	하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것 의미.
	
ex) 레스토랑(객체) - 셰프(객체)
셰프는 레스토랑이 꼭 필요하지 않음
레스토랑은 셰프가 꼭 필요함
>> 레스토랑이 셰프에게 의존함! 

	:: A객체가 B객체 없이 동작이 불가능한 상황을 'A'가 'B'에 의존적이다 라고 표현!

++ 레스토랑 객체 필드에서
셰프 = new (); 해서 셰프 멤버 객체를 생성하고
주소값을 할당 받았으면
해당 레스토랑은 생성한 그 셰프만 사용할 수 있음! 
>> 의존성 결합성 ↑ + 유연성 ↓ (유연한 개발 불가)
이러한 상황에서 유연성을 높혀주기 위해 (다양한 셰프를 사용할 수 있게 레스토랑에서 new를 하지 않음)
의존성을 느슨하게 해 줄 수 있는 방법 >> 의존성 주입!

칼 - 요리
칼 : 요리 없이 가능
요리 : 칼 없이 불가능 (칼이 반드시 필요)
요리가 칼에게 의존. (의존성)

요리 객체필드
칼 = new (); 
>> 단단한 의존성.
? 요리 종류가 달라져서 다른 칼 종류가 필요해.. 어떻게 하지??
=> 의존성 주입 (다양한 칼을 쓸 수 있게 해줌 + 요리 객체에서 new를 하지 않음)

	주입(Injection)은 말 그대로 외부에서 밀어 넣는 것.
	예를 들어 어떤 객체가 필요한 객체를 외부에서 밀어 넣는 것을 의미.
	주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고,
	어떤 객체에 의존하든 자신의 역할은 변하지 않게 된다










